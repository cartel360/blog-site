I"/<p>CI/CD is a common term nowadays in the tech world and not everyone might be familiar with it, So what is it?</p>

<h3 id="phases-of-cicd-pipeline">Phases of CI/CD Pipeline</h3>
<h4 id="key-terms">Key Terms</h4>

<p><strong>CI/CD</strong> is a software development process that automates the deployment of software.</p>

<p><strong>Continuous Integration (CI)</strong> is a practice of merging all developers working copies to a shared mainline repository, this can happen multiple times per day.</p>

<p><strong>Continuous Delivery (CD)</strong> is an engineering practice in which teams produce and release value in short cycles.</p>

<p><strong>Continuous Deployment (CD)</strong> is a software engineering approach in which the value is delivered frequently through automated deployments.</p>

<p><strong>Pipeline</strong> is a set of data processing elements connected in a series to form a continuous flow of data.</p>

<p><strong>Infrastructure as Code</strong> is the management of infrastructure using code.</p>

<p><strong>Testing</strong> is the process of validating the quality of the software.</p>

<p><strong>DevOps</strong> is a set of practices that works to automate and integrate processes between software development and IT teams.</p>

<p><strong>Provisioning</strong> is the process of setting up IT infrastructure.</p>

<p><img src="/assets/img/ci-cd-pipeline.png" alt="CI-CD Pipeline" /></p>

<h3 id="best-practices-for-cicd">Best Practices for CI/CD</h3>
<ol>
  <li>Fail fast - set up your CI/CD pipeline to find and reveal failures as early as possible. The faster you find the failure, the faster you can fix it.</li>
  <li>Measure quality - measure your code quality and test coverage before you deploy.</li>
  <li>Only road to production - since CI/CD does deployment on your behalf, it must be the only way to deploy and get rid of any manual steps.</li>
  <li>Maximum automation - if it is a process that can be automated, automate it</li>
  <li>Config in Code - all configuration code must be in code and versioned alongside production code. This includes CI/CD configuration, and deployment scripts.</li>
</ol>

<h3 id="8-principles-of-continuous-delivery">8 Principles of Continuous Delivery</h3>
<ol>
  <li>Repeatable relibale process</li>
  <li>Automate everything</li>
  <li>Version control everything</li>
  <li>Bring the pain forward</li>
  <li>Build-in quality</li>
  <li>“Done” means released</li>
  <li>Everyone is responsible</li>
  <li>Continuous improvement</li>
</ol>

<h3 id="deployment-strategy">Deployment Strategy</h3>
<ul>
  <li>Big Bang - Replace A with B all at once, A is the new version and B is the previous version.</li>
  <li>Blue-Green - Two versions run at the same time, blue is the previous version and green is the new version. The traffic can still be routed to blue while testing green and shifting to green when green is ready.</li>
  <li>Canary - This is also known as the rolling update, after deploying anew version traffic gets started being routed to the new version bit by bit until all the traffic hits the new version. Both versions will coexist for a period of time.</li>
  <li>A/B Testing - Similar to canary, but instead of routing traffic to new version, you test your new version with a subset of users in order to get feedback, then later route all traffic to the new version.</li>
</ul>

:ET